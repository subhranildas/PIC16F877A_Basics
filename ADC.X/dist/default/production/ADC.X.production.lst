

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Sep 22 19:32:10 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236                           
   237                           	psect	strings
   238  0298                     __pstrings:
   239  0298                     stringtab:
   240  0298                     __stringtab:
   241                           
   242                           ;	String table - string pointers are 1 byte each
   243  0298  1BFF               	btfsc	btemp+1,7
   244  0299  2AA2               	ljmp	stringcode
   245  029A  1383               	bcf	3,7
   246  029B  187F               	btfsc	btemp+1,0
   247  029C  1783               	bsf	3,7
   248  029D  0800               	movf	0,w
   249  029E  0A84               	incf	4,f
   250  029F  1903               	skipnz
   251  02A0  0AFF               	incf	btemp+1,f
   252  02A1  0008               	return
   253  02A2                     stringcode:
   254  02A2                     stringdir:
   255  02A2  3002               	movlw	high stringdir
   256  02A3  008A               	movwf	10
   257  02A4  0804               	movf	4,w
   258  02A5  0A84               	incf	4,f
   259  02A6  0782               	addwf	2,f
   260  02A7                     __stringbase:
   261  02A7  3400               	retlw	0
   262  02A8                     __end_of__stringtab:
   263  02A8                     _dpowers:
   264  02A8  3401               	retlw	1
   265  02A9  3400               	retlw	0
   266  02AA  340A               	retlw	10
   267  02AB  3400               	retlw	0
   268  02AC  3464               	retlw	100
   269  02AD  3400               	retlw	0
   270  02AE  34E8               	retlw	232
   271  02AF  3403               	retlw	3
   272  02B0  3410               	retlw	16
   273  02B1  3427               	retlw	39
   274  02B2                     __end_of_dpowers:
   275  001A                     _RCREG	set	26
   276  0019                     _TXREG	set	25
   277  000B                     _INTCON	set	11
   278  0018                     _RCSTA	set	24
   279  001E                     _ADRESH	set	30
   280  0006                     _PORTB	set	6
   281  001F                     _ADCON0	set	31
   282  008C                     _PIE1	set	140
   283  0087                     _TRISC	set	135
   284  0098                     _TXSTA	set	152
   285  0099                     _SPBRG	set	153
   286  009E                     _ADRESL	set	158
   287  0086                     _TRISB	set	134
   288  009F                     _ADCON1	set	159
   289  04C1                     _TRMT	set	1217
   290  02B2                     STR_2:
   291  02B2  3425               	retlw	37	;'%'
   292  02B3  3464               	retlw	100	;'d'
   293  02B4  3400               	retlw	0
   294  02B5                     STR_1:
   295  02B5  340A               	retlw	10
   296  02B6  3400               	retlw	0
   297                           
   298                           	psect	cinit
   299  000F                     start_initialization:	
   300                           ; #config settings
   301                           
   302  000F                     __initialization:
   303  000F                     end_of_initialization:	
   304                           ;End of C runtime variable initialization code
   305                           
   306  000F                     __end_of__initialization:
   307  000F  0183               	clrf	3
   308  0010  120A  118A  28FD   	ljmp	_main	;jump to C main() function
   309                           
   310                           	psect	cstackCOMMON
   311  0070                     __pcstackCOMMON:
   312  0070                     ?_USART_INIT:
   313  0070                     ?_main:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?_USART_SEND_CHAR:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?_isr:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?i1_USART_SEND_CHAR:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0070                     ??i1_USART_SEND_CHAR:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     i1USART_SEND_CHAR@ch:	
   329                           ; 1 bytes @ 0x0
   330                           
   331                           
   332                           ; 1 bytes @ 0x0
   333  0070                     	ds	1
   334  0071                     ??_isr:
   335                           
   336                           ; 1 bytes @ 0x1
   337  0071                     	ds	3
   338  0074                     isr@received:
   339                           
   340                           ; 1 bytes @ 0x4
   341  0074                     	ds	1
   342  0075                     ??_USART_INIT:
   343  0075                     ??_USART_SEND_CHAR:	
   344                           ; 1 bytes @ 0x5
   345                           
   346  0075                     ?___lwdiv:	
   347                           ; 1 bytes @ 0x5
   348                           
   349  0075                     USART_SEND_CHAR@ch:	
   350                           ; 2 bytes @ 0x5
   351                           
   352  0075                     ___lwdiv@divisor:	
   353                           ; 1 bytes @ 0x5
   354                           
   355                           
   356                           ; 2 bytes @ 0x5
   357  0075                     	ds	1
   358  0076                     ?_USART_SEND_STRING:
   359  0076                     USART_SEND_STRING@str:	
   360                           ; 1 bytes @ 0x6
   361                           
   362                           
   363                           ; 2 bytes @ 0x6
   364  0076                     	ds	1
   365  0077                     ___lwdiv@dividend:
   366                           
   367                           ; 2 bytes @ 0x7
   368  0077                     	ds	2
   369                           
   370                           	psect	cstackBANK0
   371  0020                     __pcstackBANK0:
   372  0020                     ??_USART_SEND_STRING:
   373  0020                     ??___lwdiv:	
   374                           ; 1 bytes @ 0x0
   375                           
   376                           
   377                           ; 1 bytes @ 0x0
   378  0020                     	ds	1
   379  0021                     ___lwdiv@quotient:
   380                           
   381                           ; 2 bytes @ 0x1
   382  0021                     	ds	2
   383  0023                     ___lwdiv@counter:
   384  0023                     USART_SEND_STRING@i:	
   385                           ; 1 bytes @ 0x3
   386                           
   387                           
   388                           ; 2 bytes @ 0x3
   389  0023                     	ds	1
   390  0024                     ?___lwmod:
   391  0024                     ___lwmod@divisor:	
   392                           ; 2 bytes @ 0x4
   393                           
   394                           
   395                           ; 2 bytes @ 0x4
   396  0024                     	ds	2
   397  0026                     ___lwmod@dividend:
   398                           
   399                           ; 2 bytes @ 0x6
   400  0026                     	ds	2
   401  0028                     ??___lwmod:
   402                           
   403                           ; 1 bytes @ 0x8
   404  0028                     	ds	1
   405  0029                     ___lwmod@counter:
   406                           
   407                           ; 1 bytes @ 0x9
   408  0029                     	ds	1
   409  002A                     ?_sprintf:
   410  002A                     sprintf@f:	
   411                           ; 2 bytes @ 0xA
   412                           
   413                           
   414                           ; 1 bytes @ 0xA
   415  002A                     	ds	3
   416  002D                     ??_sprintf:
   417                           
   418                           ; 1 bytes @ 0xD
   419  002D                     	ds	3
   420  0030                     sprintf@ap:
   421                           
   422                           ; 1 bytes @ 0x10
   423  0030                     	ds	1
   424  0031                     sprintf@flag:
   425                           
   426                           ; 1 bytes @ 0x11
   427  0031                     	ds	1
   428  0032                     sprintf@prec:
   429                           
   430                           ; 1 bytes @ 0x12
   431  0032                     	ds	1
   432  0033                     sprintf@val:
   433                           
   434                           ; 2 bytes @ 0x13
   435  0033                     	ds	2
   436  0035                     sprintf@sp:
   437                           
   438                           ; 1 bytes @ 0x15
   439  0035                     	ds	1
   440  0036                     sprintf@c:
   441                           
   442                           ; 1 bytes @ 0x16
   443  0036                     	ds	1
   444  0037                     ?_USART_SEND_INT:
   445  0037                     USART_SEND_INT@val:	
   446                           ; 1 bytes @ 0x17
   447                           
   448                           
   449                           ; 2 bytes @ 0x17
   450  0037                     	ds	2
   451  0039                     ??_USART_SEND_INT:
   452                           
   453                           ; 1 bytes @ 0x19
   454  0039                     	ds	1
   455  003A                     USART_SEND_INT@str:
   456                           
   457                           ; 10 bytes @ 0x1A
   458  003A                     	ds	10
   459  0044                     ??_main:
   460                           
   461                           ; 1 bytes @ 0x24
   462  0044                     	ds	3
   463  0047                     main@val:
   464                           
   465                           ; 2 bytes @ 0x27
   466  0047                     	ds	2
   467                           
   468                           	psect	maintext
   469  00FD                     __pmaintext:	
   470 ;;
   471 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   472 ;;
   473 ;; *************** function _main *****************
   474 ;; Defined at:
   475 ;;		line 31 in file "main.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  val             2   39[BANK0 ] int 
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      void 
   482 ;; Registers used:
   483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : B00/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   489 ;;      Params:         0       0       0       0       0
   490 ;;      Locals:         0       2       0       0       0
   491 ;;      Temps:          0       3       0       0       0
   492 ;;      Totals:         0       5       0       0       0
   493 ;;Total ram usage:        5 bytes
   494 ;; Hardware stack levels required when called:    5
   495 ;; This function calls:
   496 ;;		_USART_INIT
   497 ;;		_USART_SEND_INT
   498 ;;		_USART_SEND_STRING
   499 ;; This function is called by:
   500 ;;		Startup code after reset
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           
   505                           ;psect for function _main
   506  00FD                     _main:
   507  00FD                     l1042:	
   508                           ;incstack = 0
   509                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   510                           
   511                           
   512                           ;main.c: 34:     ADCON1 = 0B11001110;
   513  00FD  30CE               	movlw	206
   514  00FE  1683               	bsf	3,5	;RP0=1, select bank1
   515  00FF  1303               	bcf	3,6	;RP1=0, select bank1
   516  0100  009F               	movwf	31	;volatile
   517                           
   518                           ;main.c: 35:     ADCON0 = 0B10000001;
   519  0101  3081               	movlw	129
   520  0102  1283               	bcf	3,5	;RP0=0, select bank0
   521  0103  1303               	bcf	3,6	;RP1=0, select bank0
   522  0104  009F               	movwf	31	;volatile
   523  0105                     l1044:
   524                           
   525                           ;main.c: 39:     TRISB=0;
   526  0105  1683               	bsf	3,5	;RP0=1, select bank1
   527  0106  1303               	bcf	3,6	;RP1=0, select bank1
   528  0107  0186               	clrf	6	;volatile
   529  0108                     l1046:
   530                           
   531                           ;main.c: 40:     PORTB=0;
   532  0108  1283               	bcf	3,5	;RP0=0, select bank0
   533  0109  1303               	bcf	3,6	;RP1=0, select bank0
   534  010A  0186               	clrf	6	;volatile
   535  010B                     l1048:
   536                           
   537                           ;main.c: 42:     USART_INIT();
   538  010B  120A  118A  22E4  120A  118A  	fcall	_USART_INIT
   539  0110                     l1050:
   540                           
   541                           ;main.c: 45:         ADCON0 |= (1<<2);
   542  0110  1283               	bcf	3,5	;RP0=0, select bank0
   543  0111  1303               	bcf	3,6	;RP1=0, select bank0
   544  0112  151F               	bsf	31,2	;volatile
   545  0113                     l26:	
   546                           ;main.c: 46:         while(ADCON0 & 0b00000100);
   547                           
   548  0113  191F               	btfsc	31,2	;volatile
   549  0114  2916               	goto	u601
   550  0115  2917               	goto	u600
   551  0116                     u601:
   552  0116  2913               	goto	l26
   553  0117                     u600:
   554  0117                     l1052:
   555                           
   556                           ;main.c: 47:         int val = ((ADRESH<<8)|ADRESL);
   557  0117  081E               	movf	30,w	;volatile
   558  0118  00C8               	movwf	main@val+1
   559  0119  1683               	bsf	3,5	;RP0=1, select bank1
   560  011A  1303               	bcf	3,6	;RP1=0, select bank1
   561  011B  081E               	movf	30,w	;volatile
   562  011C  1283               	bcf	3,5	;RP0=0, select bank0
   563  011D  1303               	bcf	3,6	;RP1=0, select bank0
   564  011E  00C7               	movwf	main@val
   565  011F                     l1054:
   566                           
   567                           ;main.c: 50:         if(val>100 && val<300) PORTB = 0b00000001;
   568  011F  0848               	movf	main@val+1,w
   569  0120  3A80               	xorlw	128
   570  0121  00FF               	movwf	btemp+1
   571  0122  3080               	movlw	128
   572  0123  027F               	subwf	btemp+1,w
   573  0124  1D03               	skipz
   574  0125  2928               	goto	u615
   575  0126  3065               	movlw	101
   576  0127  0247               	subwf	main@val,w
   577  0128                     u615:
   578  0128  1C03               	skipc
   579  0129  292B               	goto	u611
   580  012A  292C               	goto	u610
   581  012B                     u611:
   582  012B  2940               	goto	l1060
   583  012C                     u610:
   584  012C                     l1056:
   585  012C  1283               	bcf	3,5	;RP0=0, select bank0
   586  012D  1303               	bcf	3,6	;RP1=0, select bank0
   587  012E  0848               	movf	main@val+1,w
   588  012F  3A80               	xorlw	128
   589  0130  00FF               	movwf	btemp+1
   590  0131  3081               	movlw	129
   591  0132  027F               	subwf	btemp+1,w
   592  0133  1D03               	skipz
   593  0134  2937               	goto	u625
   594  0135  302C               	movlw	44
   595  0136  0247               	subwf	main@val,w
   596  0137                     u625:
   597  0137  1803               	skipnc
   598  0138  293A               	goto	u621
   599  0139  293B               	goto	u620
   600  013A                     u621:
   601  013A  2940               	goto	l1060
   602  013B                     u620:
   603  013B                     l1058:
   604  013B  3001               	movlw	1
   605  013C  1283               	bcf	3,5	;RP0=0, select bank0
   606  013D  1303               	bcf	3,6	;RP1=0, select bank0
   607  013E  0086               	movwf	6	;volatile
   608  013F  29AC               	goto	l1080
   609  0140                     l1060:
   610  0140  1283               	bcf	3,5	;RP0=0, select bank0
   611  0141  1303               	bcf	3,6	;RP1=0, select bank0
   612  0142  0848               	movf	main@val+1,w
   613  0143  3A80               	xorlw	128
   614  0144  00FF               	movwf	btemp+1
   615  0145  3081               	movlw	129
   616  0146  027F               	subwf	btemp+1,w
   617  0147  1D03               	skipz
   618  0148  294B               	goto	u635
   619  0149  302C               	movlw	44
   620  014A  0247               	subwf	main@val,w
   621  014B                     u635:
   622  014B  1C03               	skipc
   623  014C  294E               	goto	u631
   624  014D  294F               	goto	u630
   625  014E                     u631:
   626  014E  2963               	goto	l1066
   627  014F                     u630:
   628  014F                     l1062:
   629  014F  1283               	bcf	3,5	;RP0=0, select bank0
   630  0150  1303               	bcf	3,6	;RP1=0, select bank0
   631  0151  0848               	movf	main@val+1,w
   632  0152  3A80               	xorlw	128
   633  0153  00FF               	movwf	btemp+1
   634  0154  3081               	movlw	129
   635  0155  027F               	subwf	btemp+1,w
   636  0156  1D03               	skipz
   637  0157  295A               	goto	u645
   638  0158  30F4               	movlw	244
   639  0159  0247               	subwf	main@val,w
   640  015A                     u645:
   641  015A  1803               	skipnc
   642  015B  295D               	goto	u641
   643  015C  295E               	goto	u640
   644  015D                     u641:
   645  015D  2963               	goto	l1066
   646  015E                     u640:
   647  015E                     l1064:
   648  015E  3003               	movlw	3
   649  015F  1283               	bcf	3,5	;RP0=0, select bank0
   650  0160  1303               	bcf	3,6	;RP1=0, select bank0
   651  0161  0086               	movwf	6	;volatile
   652  0162  29AC               	goto	l1080
   653  0163                     l1066:
   654  0163  1283               	bcf	3,5	;RP0=0, select bank0
   655  0164  1303               	bcf	3,6	;RP1=0, select bank0
   656  0165  0848               	movf	main@val+1,w
   657  0166  3A80               	xorlw	128
   658  0167  00FF               	movwf	btemp+1
   659  0168  3081               	movlw	129
   660  0169  027F               	subwf	btemp+1,w
   661  016A  1D03               	skipz
   662  016B  296E               	goto	u655
   663  016C  30F4               	movlw	244
   664  016D  0247               	subwf	main@val,w
   665  016E                     u655:
   666  016E  1C03               	skipc
   667  016F  2971               	goto	u651
   668  0170  2972               	goto	u650
   669  0171                     u651:
   670  0171  2986               	goto	l1072
   671  0172                     u650:
   672  0172                     l1068:
   673  0172  1283               	bcf	3,5	;RP0=0, select bank0
   674  0173  1303               	bcf	3,6	;RP1=0, select bank0
   675  0174  0848               	movf	main@val+1,w
   676  0175  3A80               	xorlw	128
   677  0176  00FF               	movwf	btemp+1
   678  0177  3082               	movlw	130
   679  0178  027F               	subwf	btemp+1,w
   680  0179  1D03               	skipz
   681  017A  297D               	goto	u665
   682  017B  30BC               	movlw	188
   683  017C  0247               	subwf	main@val,w
   684  017D                     u665:
   685  017D  1803               	skipnc
   686  017E  2980               	goto	u661
   687  017F  2981               	goto	u660
   688  0180                     u661:
   689  0180  2986               	goto	l1072
   690  0181                     u660:
   691  0181                     l1070:
   692  0181  3007               	movlw	7
   693  0182  1283               	bcf	3,5	;RP0=0, select bank0
   694  0183  1303               	bcf	3,6	;RP1=0, select bank0
   695  0184  0086               	movwf	6	;volatile
   696  0185  29AC               	goto	l1080
   697  0186                     l1072:
   698  0186  1283               	bcf	3,5	;RP0=0, select bank0
   699  0187  1303               	bcf	3,6	;RP1=0, select bank0
   700  0188  0848               	movf	main@val+1,w
   701  0189  3A80               	xorlw	128
   702  018A  00FF               	movwf	btemp+1
   703  018B  3082               	movlw	130
   704  018C  027F               	subwf	btemp+1,w
   705  018D  1D03               	skipz
   706  018E  2991               	goto	u675
   707  018F  30BC               	movlw	188
   708  0190  0247               	subwf	main@val,w
   709  0191                     u675:
   710  0191  1C03               	skipc
   711  0192  2994               	goto	u671
   712  0193  2995               	goto	u670
   713  0194                     u671:
   714  0194  29A9               	goto	l1078
   715  0195                     u670:
   716  0195                     l1074:
   717  0195  1283               	bcf	3,5	;RP0=0, select bank0
   718  0196  1303               	bcf	3,6	;RP1=0, select bank0
   719  0197  0848               	movf	main@val+1,w
   720  0198  3A80               	xorlw	128
   721  0199  00FF               	movwf	btemp+1
   722  019A  3083               	movlw	131
   723  019B  027F               	subwf	btemp+1,w
   724  019C  1D03               	skipz
   725  019D  29A0               	goto	u685
   726  019E  3084               	movlw	132
   727  019F  0247               	subwf	main@val,w
   728  01A0                     u685:
   729  01A0  1803               	skipnc
   730  01A1  29A3               	goto	u681
   731  01A2  29A4               	goto	u680
   732  01A3                     u681:
   733  01A3  29A9               	goto	l1078
   734  01A4                     u680:
   735  01A4                     l1076:
   736  01A4  300F               	movlw	15
   737  01A5  1283               	bcf	3,5	;RP0=0, select bank0
   738  01A6  1303               	bcf	3,6	;RP1=0, select bank0
   739  01A7  0086               	movwf	6	;volatile
   740  01A8  29AC               	goto	l1080
   741  01A9                     l1078:
   742  01A9  1283               	bcf	3,5	;RP0=0, select bank0
   743  01AA  1303               	bcf	3,6	;RP1=0, select bank0
   744  01AB  0186               	clrf	6	;volatile
   745  01AC                     l1080:
   746                           
   747                           ;main.c: 56:         USART_SEND_INT(val);
   748  01AC  0848               	movf	main@val+1,w
   749  01AD  00B8               	movwf	USART_SEND_INT@val+1
   750  01AE  0847               	movf	main@val,w
   751  01AF  00B7               	movwf	USART_SEND_INT@val
   752  01B0  120A  118A  22B7  120A  118A  	fcall	_USART_SEND_INT
   753  01B5                     l1082:
   754                           
   755                           ;main.c: 57:         USART_SEND_STRING("\n");
   756  01B5  300E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   757  01B6  00F6               	movwf	USART_SEND_STRING@str
   758  01B7  3080               	movlw	128
   759  01B8  00F7               	movwf	USART_SEND_STRING@str+1
   760  01B9  120A  118A  2216  120A  118A  	fcall	_USART_SEND_STRING
   761  01BE                     l1084:
   762                           
   763                           ;main.c: 60:         _delay((unsigned long)((100)*(20000000/4000.0)));
   764  01BE  3003               	movlw	3
   765  01BF  1283               	bcf	3,5	;RP0=0, select bank0
   766  01C0  1303               	bcf	3,6	;RP1=0, select bank0
   767  01C1  00C6               	movwf	??_main+2
   768  01C2  308A               	movlw	138
   769  01C3  00C5               	movwf	??_main+1
   770  01C4  3055               	movlw	85
   771  01C5  00C4               	movwf	??_main
   772  01C6                     u697:
   773  01C6  0BC4               	decfsz	??_main,f
   774  01C7  29C6               	goto	u697
   775  01C8  0BC5               	decfsz	??_main+1,f
   776  01C9  29C6               	goto	u697
   777  01CA  0BC6               	decfsz	??_main+2,f
   778  01CB  29C6               	goto	u697
   779  01CC  2910               	goto	l1050
   780  01CD  120A  118A  280C   	ljmp	start
   781  01D0                     __end_of_main:
   782                           
   783                           	psect	text1
   784  02B7                     __ptext1:	
   785 ;; *************** function _USART_SEND_INT *****************
   786 ;; Defined at:
   787 ;;		line 32 in file "USART.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  val             2   23[BANK0 ] int 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  str            10   26[BANK0 ] unsigned char [10]
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   801 ;;      Params:         0       2       0       0       0
   802 ;;      Locals:         0      10       0       0       0
   803 ;;      Temps:          0       1       0       0       0
   804 ;;      Totals:         0      13       0       0       0
   805 ;;Total ram usage:       13 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    4
   808 ;; This function calls:
   809 ;;		_USART_SEND_STRING
   810 ;;		_sprintf
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function _USART_SEND_INT
   818  02B7                     _USART_SEND_INT:
   819  02B7                     l1036:	
   820                           ;incstack = 0
   821                           ; Regs used in _USART_SEND_INT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   822                           
   823                           
   824                           ;USART.c: 33:     char str[10];;USART.c: 34:     sprintf(str, "%d", val);
   825  02B7  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   826  02B8  1283               	bcf	3,5	;RP0=0, select bank0
   827  02B9  1303               	bcf	3,6	;RP1=0, select bank0
   828  02BA  00B9               	movwf	??_USART_SEND_INT
   829  02BB  0839               	movf	??_USART_SEND_INT,w
   830  02BC  00AA               	movwf	sprintf@f
   831  02BD  0838               	movf	USART_SEND_INT@val+1,w
   832  02BE  00AC               	movwf	?_sprintf+2
   833  02BF  0837               	movf	USART_SEND_INT@val,w
   834  02C0  00AB               	movwf	?_sprintf+1
   835  02C1  303A               	movlw	(low (USART_SEND_INT@str| 0))& (0+255)
   836  02C2  120A  118A  2013  120A  118A  	fcall	_sprintf
   837                           
   838                           ;USART.c: 35:     USART_SEND_STRING(str);
   839  02C7  303A               	movlw	(low (USART_SEND_INT@str| 0))& (0+255)
   840  02C8  00F6               	movwf	USART_SEND_STRING@str
   841  02C9  3000               	movlw	0
   842  02CA  00F7               	movwf	USART_SEND_STRING@str+1
   843  02CB  120A  118A  2216  120A  118A  	fcall	_USART_SEND_STRING
   844  02D0                     l77:
   845  02D0  0008               	return
   846  02D1                     __end_of_USART_SEND_INT:
   847                           
   848                           	psect	text2
   849  0013                     __ptext2:	
   850 ;; *************** function _sprintf *****************
   851 ;; Defined at:
   852 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;  sp              1    wreg     PTR unsigned char 
   855 ;;		 -> USART_SEND_INT@str(10), 
   856 ;;  f               1   10[BANK0 ] PTR const unsigned char 
   857 ;;		 -> STR_2(3), 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  sp              1   21[BANK0 ] PTR unsigned char 
   860 ;;		 -> USART_SEND_INT@str(10), 
   861 ;;  tmpval          4    0        struct .
   862 ;;  val             2   19[BANK0 ] unsigned int 
   863 ;;  cp              2    0        PTR const unsigned char 
   864 ;;  len             2    0        unsigned int 
   865 ;;  c               1   22[BANK0 ] unsigned char 
   866 ;;  prec            1   18[BANK0 ] char 
   867 ;;  flag            1   17[BANK0 ] unsigned char 
   868 ;;  ap              1   16[BANK0 ] PTR void [1]
   869 ;;		 -> ?_sprintf(2), 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  2   10[BANK0 ] int 
   872 ;; Registers used:
   873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   879 ;;      Params:         0       3       0       0       0
   880 ;;      Locals:         0       7       0       0       0
   881 ;;      Temps:          0       3       0       0       0
   882 ;;      Totals:         0      13       0       0       0
   883 ;;Total ram usage:       13 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    3
   886 ;; This function calls:
   887 ;;		___lwdiv
   888 ;;		___lwmod
   889 ;; This function is called by:
   890 ;;		_USART_SEND_INT
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function _sprintf
   896  0013                     _sprintf:
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   900                           ;sprintf@sp stored from wreg
   901  0013  1283               	bcf	3,5	;RP0=0, select bank0
   902  0014  1303               	bcf	3,6	;RP1=0, select bank0
   903  0015  00B5               	movwf	sprintf@sp
   904  0016                     l966:
   905                           
   906                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   907  0016  302B               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   908  0017  00AD               	movwf	??_sprintf
   909  0018  082D               	movf	??_sprintf,w
   910  0019  00B0               	movwf	sprintf@ap
   911                           
   912                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   913  001A  28E6               	goto	l1018
   914  001B                     l968:
   915                           
   916                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   917  001B  3025               	movlw	37
   918  001C  0636               	xorwf	sprintf@c,w
   919  001D  1903               	btfsc	3,2
   920  001E  2820               	goto	u521
   921  001F  2821               	goto	u520
   922  0020                     u521:
   923  0020  282D               	goto	l974
   924  0021                     u520:
   925  0021                     l970:
   926                           
   927                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   928  0021  0836               	movf	sprintf@c,w
   929  0022  00AD               	movwf	??_sprintf
   930  0023  0835               	movf	sprintf@sp,w
   931  0024  0084               	movwf	4
   932  0025  082D               	movf	??_sprintf,w
   933  0026  1383               	bcf	3,7	;select IRP bank0
   934  0027  0080               	movwf	0
   935  0028                     l972:
   936  0028  3001               	movlw	1
   937  0029  00AD               	movwf	??_sprintf
   938  002A  082D               	movf	??_sprintf,w
   939  002B  07B5               	addwf	sprintf@sp,f
   940                           
   941                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 559:    continue;
   942  002C  28E6               	goto	l1018
   943  002D                     l974:
   944                           
   945                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   946  002D  01B1               	clrf	sprintf@flag
   947  002E                     l978:	
   948                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   949                           
   950  002E  3001               	movlw	1
   951  002F  07AA               	addwf	sprintf@f,f
   952  0030  30FF               	movlw	-1
   953  0031  072A               	addwf	sprintf@f,w
   954  0032  0084               	movwf	4
   955  0033  120A  118A  22A2  120A  118A  	fcall	stringdir
   956  0038  00B6               	movwf	sprintf@c
   957  0039  00AD               	movwf	??_sprintf
   958  003A  01AE               	clrf	??_sprintf+1
   959                           
   960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   961                           ; Switch size 1, requested type "simple"
   962                           ; Number of cases is 1, Range of values is 0 to 0
   963                           ; switch strategies available:
   964                           ; Name         Instructions Cycles
   965                           ; simple_byte            4     3 (average)
   966                           ; direct_byte           11     8 (fixed)
   967                           ; jumptable            260     6 (fixed)
   968                           ;	Chosen strategy is simple_byte
   969  003B  082E               	movf	??_sprintf+1,w
   970  003C  3A00               	xorlw	0	; case 0
   971  003D  1903               	skipnz
   972  003E  2840               	goto	l1110
   973  003F  28E6               	goto	l1018
   974  0040                     l1110:
   975                           
   976                           ; Switch size 1, requested type "simple"
   977                           ; Number of cases is 3, Range of values is 0 to 105
   978                           ; switch strategies available:
   979                           ; Name         Instructions Cycles
   980                           ; simple_byte           10     6 (average)
   981                           ; jumptable            260     6 (fixed)
   982                           ;	Chosen strategy is simple_byte
   983  0040  082D               	movf	??_sprintf,w
   984  0041  3A00               	xorlw	0	; case 0
   985  0042  1903               	skipnz
   986  0043  28F8               	goto	l1020
   987  0044  3A64               	xorlw	100	; case 100
   988  0045  1903               	skipnz
   989  0046  284B               	goto	l980
   990  0047  3A0D               	xorlw	13	; case 105
   991  0048  1903               	skipnz
   992  0049  284B               	goto	l980
   993  004A  28E6               	goto	l1018
   994  004B                     l980:
   995                           
   996                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   997  004B  0830               	movf	sprintf@ap,w
   998  004C  0084               	movwf	4
   999  004D  1383               	bcf	3,7	;select IRP bank0
  1000  004E  0800               	movf	0,w
  1001  004F  00B3               	movwf	sprintf@val
  1002  0050  0A84               	incf	4,f
  1003  0051  0800               	movf	0,w
  1004  0052  00B4               	movwf	sprintf@val+1
  1005  0053                     l982:
  1006  0053  3002               	movlw	2
  1007  0054  00AD               	movwf	??_sprintf
  1008  0055  082D               	movf	??_sprintf,w
  1009  0056  07B0               	addwf	sprintf@ap,f
  1010  0057                     l984:
  1011                           
  1012                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1013  0057  1FB4               	btfss	sprintf@val+1,7
  1014  0058  285A               	goto	u531
  1015  0059  285B               	goto	u530
  1016  005A                     u531:
  1017  005A  2864               	goto	l990
  1018  005B                     u530:
  1019  005B                     l986:
  1020                           
  1021                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1022  005B  3003               	movlw	3
  1023  005C  00AD               	movwf	??_sprintf
  1024  005D  082D               	movf	??_sprintf,w
  1025  005E  04B1               	iorwf	sprintf@flag,f
  1026  005F                     l988:
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1029  005F  09B3               	comf	sprintf@val,f
  1030  0060  09B4               	comf	sprintf@val+1,f
  1031  0061  0AB3               	incf	sprintf@val,f
  1032  0062  1903               	skipnz
  1033  0063  0AB4               	incf	sprintf@val+1,f
  1034  0064                     l990:
  1035                           
  1036                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1037  0064  01B6               	clrf	sprintf@c
  1038  0065  0AB6               	incf	sprintf@c,f
  1039  0066                     l996:
  1040                           
  1041                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1042  0066  0836               	movf	sprintf@c,w
  1043  0067  00AD               	movwf	??_sprintf
  1044  0068  072D               	addwf	??_sprintf,w
  1045  0069  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1046  006A  0084               	movwf	4
  1047  006B  120A  118A  22A2  120A  118A  	fcall	stringdir
  1048  0070  00AE               	movwf	??_sprintf+1
  1049  0071  120A  118A  22A2  120A  118A  	fcall	stringdir
  1050  0076  00AF               	movwf	??_sprintf+2
  1051  0077  082F               	movf	??_sprintf+2,w
  1052  0078  0234               	subwf	sprintf@val+1,w
  1053  0079  1D03               	skipz
  1054  007A  287D               	goto	u545
  1055  007B  082E               	movf	??_sprintf+1,w
  1056  007C  0233               	subwf	sprintf@val,w
  1057  007D                     u545:
  1058  007D  1803               	skipnc
  1059  007E  2880               	goto	u541
  1060  007F  2881               	goto	u540
  1061  0080                     u541:
  1062  0080  2882               	goto	l1000
  1063  0081                     u540:
  1064  0081  288C               	goto	l1002
  1065  0082                     l1000:
  1066  0082  3001               	movlw	1
  1067  0083  00AD               	movwf	??_sprintf
  1068  0084  082D               	movf	??_sprintf,w
  1069  0085  07B6               	addwf	sprintf@c,f
  1070  0086  3005               	movlw	5
  1071  0087  0636               	xorwf	sprintf@c,w
  1072  0088  1D03               	btfss	3,2
  1073  0089  288B               	goto	u551
  1074  008A  288C               	goto	u550
  1075  008B                     u551:
  1076  008B  2866               	goto	l996
  1077  008C                     u550:
  1078  008C                     l1002:
  1079                           
  1080                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1081  008C  0831               	movf	sprintf@flag,w
  1082  008D  3903               	andlw	3
  1083  008E  1903               	btfsc	3,2
  1084  008F  2891               	goto	u561
  1085  0090  2892               	goto	u560
  1086  0091                     u561:
  1087  0091  289D               	goto	l1008
  1088  0092                     u560:
  1089  0092                     l1004:
  1090                           
  1091                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1092  0092  302D               	movlw	45
  1093  0093  00AD               	movwf	??_sprintf
  1094  0094  0835               	movf	sprintf@sp,w
  1095  0095  0084               	movwf	4
  1096  0096  082D               	movf	??_sprintf,w
  1097  0097  1383               	bcf	3,7	;select IRP bank0
  1098  0098  0080               	movwf	0
  1099  0099                     l1006:
  1100  0099  3001               	movlw	1
  1101  009A  00AD               	movwf	??_sprintf
  1102  009B  082D               	movf	??_sprintf,w
  1103  009C  07B5               	addwf	sprintf@sp,f
  1104  009D                     l1008:
  1105                           
  1106                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1107  009D  0836               	movf	sprintf@c,w
  1108  009E  00AD               	movwf	??_sprintf
  1109  009F  082D               	movf	??_sprintf,w
  1110  00A0  00B2               	movwf	sprintf@prec
  1111                           
  1112                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1113  00A1  28DD               	goto	l1016
  1114  00A2                     l1010:
  1115                           
  1116                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1117  00A2  300A               	movlw	10
  1118  00A3  00A4               	movwf	___lwmod@divisor
  1119  00A4  3000               	movlw	0
  1120  00A5  00A5               	movwf	___lwmod@divisor+1
  1121  00A6  0832               	movf	sprintf@prec,w
  1122  00A7  00AD               	movwf	??_sprintf
  1123  00A8  072D               	addwf	??_sprintf,w
  1124  00A9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1125  00AA  0084               	movwf	4
  1126  00AB  120A  118A  22A2  120A  118A  	fcall	stringdir
  1127  00B0  00F5               	movwf	___lwdiv@divisor
  1128  00B1  120A  118A  22A2  120A  118A  	fcall	stringdir
  1129  00B6  00F6               	movwf	___lwdiv@divisor+1
  1130  00B7  0834               	movf	sprintf@val+1,w
  1131  00B8  00F8               	movwf	___lwdiv@dividend+1
  1132  00B9  0833               	movf	sprintf@val,w
  1133  00BA  00F7               	movwf	___lwdiv@dividend
  1134  00BB  120A  118A  21D0  120A  118A  	fcall	___lwdiv
  1135  00C0  0876               	movf	?___lwdiv+1,w
  1136  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1137  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1138  00C3  00A7               	movwf	___lwmod@dividend+1
  1139  00C4  0875               	movf	?___lwdiv,w
  1140  00C5  00A6               	movwf	___lwmod@dividend
  1141  00C6  120A  118A  225C  120A  118A  	fcall	___lwmod
  1142  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1143  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1144  00CD  0824               	movf	?___lwmod,w
  1145  00CE  3E30               	addlw	48
  1146  00CF  00AE               	movwf	??_sprintf+1
  1147  00D0  082E               	movf	??_sprintf+1,w
  1148  00D1  00B6               	movwf	sprintf@c
  1149  00D2                     l1012:
  1150                           
  1151                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1152  00D2  0836               	movf	sprintf@c,w
  1153  00D3  00AD               	movwf	??_sprintf
  1154  00D4  0835               	movf	sprintf@sp,w
  1155  00D5  0084               	movwf	4
  1156  00D6  082D               	movf	??_sprintf,w
  1157  00D7  1383               	bcf	3,7	;select IRP bank0
  1158  00D8  0080               	movwf	0
  1159  00D9                     l1014:
  1160  00D9  3001               	movlw	1
  1161  00DA  00AD               	movwf	??_sprintf
  1162  00DB  082D               	movf	??_sprintf,w
  1163  00DC  07B5               	addwf	sprintf@sp,f
  1164  00DD                     l1016:
  1165                           
  1166                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1167  00DD  30FF               	movlw	255
  1168  00DE  00AD               	movwf	??_sprintf
  1169  00DF  082D               	movf	??_sprintf,w
  1170  00E0  07B2               	addwf	sprintf@prec,f
  1171  00E1  0A32               	incf	sprintf@prec,w
  1172  00E2  1D03               	btfss	3,2
  1173  00E3  28E5               	goto	u571
  1174  00E4  28E6               	goto	u570
  1175  00E5                     u571:
  1176  00E5  28A2               	goto	l1010
  1177  00E6                     u570:
  1178  00E6                     l1018:
  1179                           
  1180                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1181  00E6  3001               	movlw	1
  1182  00E7  07AA               	addwf	sprintf@f,f
  1183  00E8  30FF               	movlw	-1
  1184  00E9  072A               	addwf	sprintf@f,w
  1185  00EA  0084               	movwf	4
  1186  00EB  120A  118A  22A2  120A  118A  	fcall	stringdir
  1187  00F0  00AD               	movwf	??_sprintf
  1188  00F1  082D               	movf	??_sprintf,w
  1189  00F2  00B6               	movwf	sprintf@c
  1190  00F3  0836               	movf	sprintf@c,w
  1191  00F4  1D03               	btfss	3,2
  1192  00F5  28F7               	goto	u581
  1193  00F6  28F8               	goto	u580
  1194  00F7                     u581:
  1195  00F7  281B               	goto	l968
  1196  00F8                     u580:
  1197  00F8                     l1020:
  1198                           
  1199                           ;C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1200  00F8  0835               	movf	sprintf@sp,w
  1201  00F9  0084               	movwf	4
  1202  00FA  1383               	bcf	3,7	;select IRP bank0
  1203  00FB  0180               	clrf	0
  1204  00FC                     l192:
  1205  00FC  0008               	return
  1206  00FD                     __end_of_sprintf:
  1207                           
  1208                           	psect	text3
  1209  025C                     __ptext3:	
  1210 ;; *************** function ___lwmod *****************
  1211 ;; Defined at:
  1212 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;  divisor         2    4[BANK0 ] unsigned int 
  1215 ;;  dividend        2    6[BANK0 ] unsigned int 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  counter         1    9[BANK0 ] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  2    4[BANK0 ] unsigned int 
  1220 ;; Registers used:
  1221 ;;		wreg, status,2, status,0
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       4       0       0       0
  1228 ;;      Locals:         0       1       0       0       0
  1229 ;;      Temps:          0       1       0       0       0
  1230 ;;      Totals:         0       6       0       0       0
  1231 ;;Total ram usage:        6 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    2
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_sprintf
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function ___lwmod
  1243  025C                     ___lwmod:
  1244  025C                     l936:	
  1245                           ;incstack = 0
  1246                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1247                           
  1248  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1249  025D  1303               	bcf	3,6	;RP1=0, select bank0
  1250  025E  0824               	movf	___lwmod@divisor,w
  1251  025F  0425               	iorwf	___lwmod@divisor+1,w
  1252  0260  1903               	btfsc	3,2
  1253  0261  2A63               	goto	u431
  1254  0262  2A64               	goto	u430
  1255  0263                     u431:
  1256  0263  2A93               	goto	l954
  1257  0264                     u430:
  1258  0264                     l938:
  1259  0264  01A9               	clrf	___lwmod@counter
  1260  0265  0AA9               	incf	___lwmod@counter,f
  1261  0266  2A72               	goto	l944
  1262  0267                     l940:
  1263  0267  3001               	movlw	1
  1264  0268                     u445:
  1265  0268  1003               	clrc
  1266  0269  0DA4               	rlf	___lwmod@divisor,f
  1267  026A  0DA5               	rlf	___lwmod@divisor+1,f
  1268  026B  3EFF               	addlw	-1
  1269  026C  1D03               	skipz
  1270  026D  2A68               	goto	u445
  1271  026E                     l942:
  1272  026E  3001               	movlw	1
  1273  026F  00A8               	movwf	??___lwmod
  1274  0270  0828               	movf	??___lwmod,w
  1275  0271  07A9               	addwf	___lwmod@counter,f
  1276  0272                     l944:
  1277  0272  1FA5               	btfss	___lwmod@divisor+1,7
  1278  0273  2A75               	goto	u451
  1279  0274  2A76               	goto	u450
  1280  0275                     u451:
  1281  0275  2A67               	goto	l940
  1282  0276                     u450:
  1283  0276                     l946:
  1284  0276  0825               	movf	___lwmod@divisor+1,w
  1285  0277  0227               	subwf	___lwmod@dividend+1,w
  1286  0278  1D03               	skipz
  1287  0279  2A7C               	goto	u465
  1288  027A  0824               	movf	___lwmod@divisor,w
  1289  027B  0226               	subwf	___lwmod@dividend,w
  1290  027C                     u465:
  1291  027C  1C03               	skipc
  1292  027D  2A7F               	goto	u461
  1293  027E  2A80               	goto	u460
  1294  027F                     u461:
  1295  027F  2A86               	goto	l950
  1296  0280                     u460:
  1297  0280                     l948:
  1298  0280  0824               	movf	___lwmod@divisor,w
  1299  0281  02A6               	subwf	___lwmod@dividend,f
  1300  0282  0825               	movf	___lwmod@divisor+1,w
  1301  0283  1C03               	skipc
  1302  0284  03A7               	decf	___lwmod@dividend+1,f
  1303  0285  02A7               	subwf	___lwmod@dividend+1,f
  1304  0286                     l950:
  1305  0286  3001               	movlw	1
  1306  0287                     u475:
  1307  0287  1003               	clrc
  1308  0288  0CA5               	rrf	___lwmod@divisor+1,f
  1309  0289  0CA4               	rrf	___lwmod@divisor,f
  1310  028A  3EFF               	addlw	-1
  1311  028B  1D03               	skipz
  1312  028C  2A87               	goto	u475
  1313  028D                     l952:
  1314  028D  3001               	movlw	1
  1315  028E  02A9               	subwf	___lwmod@counter,f
  1316  028F  1D03               	btfss	3,2
  1317  0290  2A92               	goto	u481
  1318  0291  2A93               	goto	u480
  1319  0292                     u481:
  1320  0292  2A76               	goto	l946
  1321  0293                     u480:
  1322  0293                     l954:
  1323  0293  0827               	movf	___lwmod@dividend+1,w
  1324  0294  00A5               	movwf	?___lwmod+1
  1325  0295  0826               	movf	___lwmod@dividend,w
  1326  0296  00A4               	movwf	?___lwmod
  1327  0297                     l478:
  1328  0297  0008               	return
  1329  0298                     __end_of___lwmod:
  1330                           
  1331                           	psect	text4
  1332  01D0                     __ptext4:	
  1333 ;; *************** function ___lwdiv *****************
  1334 ;; Defined at:
  1335 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  divisor         2    5[COMMON] unsigned int 
  1338 ;;  dividend        2    7[COMMON] unsigned int 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  quotient        2    1[BANK0 ] unsigned int 
  1341 ;;  counter         1    3[BANK0 ] unsigned char 
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  2    5[COMMON] unsigned int 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2, status,0
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1351 ;;      Params:         4       0       0       0       0
  1352 ;;      Locals:         0       3       0       0       0
  1353 ;;      Temps:          0       1       0       0       0
  1354 ;;      Totals:         4       4       0       0       0
  1355 ;;Total ram usage:        8 bytes
  1356 ;; Hardware stack levels used:    1
  1357 ;; Hardware stack levels required when called:    2
  1358 ;; This function calls:
  1359 ;;		Nothing
  1360 ;; This function is called by:
  1361 ;;		_sprintf
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           
  1366                           ;psect for function ___lwdiv
  1367  01D0                     ___lwdiv:
  1368  01D0                     l910:	
  1369                           ;incstack = 0
  1370                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1371                           
  1372  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1373  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1374  01D2  01A1               	clrf	___lwdiv@quotient
  1375  01D3  01A2               	clrf	___lwdiv@quotient+1
  1376  01D4                     l912:
  1377  01D4  0875               	movf	___lwdiv@divisor,w
  1378  01D5  0476               	iorwf	___lwdiv@divisor+1,w
  1379  01D6  1903               	btfsc	3,2
  1380  01D7  29D9               	goto	u361
  1381  01D8  29DA               	goto	u360
  1382  01D9                     u361:
  1383  01D9  2A11               	goto	l932
  1384  01DA                     u360:
  1385  01DA                     l914:
  1386  01DA  01A3               	clrf	___lwdiv@counter
  1387  01DB  0AA3               	incf	___lwdiv@counter,f
  1388  01DC  29E8               	goto	l920
  1389  01DD                     l916:
  1390  01DD  3001               	movlw	1
  1391  01DE                     u375:
  1392  01DE  1003               	clrc
  1393  01DF  0DF5               	rlf	___lwdiv@divisor,f
  1394  01E0  0DF6               	rlf	___lwdiv@divisor+1,f
  1395  01E1  3EFF               	addlw	-1
  1396  01E2  1D03               	skipz
  1397  01E3  29DE               	goto	u375
  1398  01E4                     l918:
  1399  01E4  3001               	movlw	1
  1400  01E5  00A0               	movwf	??___lwdiv
  1401  01E6  0820               	movf	??___lwdiv,w
  1402  01E7  07A3               	addwf	___lwdiv@counter,f
  1403  01E8                     l920:
  1404  01E8  1FF6               	btfss	___lwdiv@divisor+1,7
  1405  01E9  29EB               	goto	u381
  1406  01EA  29EC               	goto	u380
  1407  01EB                     u381:
  1408  01EB  29DD               	goto	l916
  1409  01EC                     u380:
  1410  01EC                     l922:
  1411  01EC  3001               	movlw	1
  1412  01ED                     u395:
  1413  01ED  1003               	clrc
  1414  01EE  0DA1               	rlf	___lwdiv@quotient,f
  1415  01EF  0DA2               	rlf	___lwdiv@quotient+1,f
  1416  01F0  3EFF               	addlw	-1
  1417  01F1  1D03               	skipz
  1418  01F2  29ED               	goto	u395
  1419  01F3  0876               	movf	___lwdiv@divisor+1,w
  1420  01F4  0278               	subwf	___lwdiv@dividend+1,w
  1421  01F5  1D03               	skipz
  1422  01F6  29F9               	goto	u405
  1423  01F7  0875               	movf	___lwdiv@divisor,w
  1424  01F8  0277               	subwf	___lwdiv@dividend,w
  1425  01F9                     u405:
  1426  01F9  1C03               	skipc
  1427  01FA  29FC               	goto	u401
  1428  01FB  29FD               	goto	u400
  1429  01FC                     u401:
  1430  01FC  2A04               	goto	l928
  1431  01FD                     u400:
  1432  01FD                     l924:
  1433  01FD  0875               	movf	___lwdiv@divisor,w
  1434  01FE  02F7               	subwf	___lwdiv@dividend,f
  1435  01FF  0876               	movf	___lwdiv@divisor+1,w
  1436  0200  1C03               	skipc
  1437  0201  03F8               	decf	___lwdiv@dividend+1,f
  1438  0202  02F8               	subwf	___lwdiv@dividend+1,f
  1439  0203                     l926:
  1440  0203  1421               	bsf	___lwdiv@quotient,0
  1441  0204                     l928:
  1442  0204  3001               	movlw	1
  1443  0205                     u415:
  1444  0205  1003               	clrc
  1445  0206  0CF6               	rrf	___lwdiv@divisor+1,f
  1446  0207  0CF5               	rrf	___lwdiv@divisor,f
  1447  0208  3EFF               	addlw	-1
  1448  0209  1D03               	skipz
  1449  020A  2A05               	goto	u415
  1450  020B                     l930:
  1451  020B  3001               	movlw	1
  1452  020C  02A3               	subwf	___lwdiv@counter,f
  1453  020D  1D03               	btfss	3,2
  1454  020E  2A10               	goto	u421
  1455  020F  2A11               	goto	u420
  1456  0210                     u421:
  1457  0210  29EC               	goto	l922
  1458  0211                     u420:
  1459  0211                     l932:
  1460  0211  0822               	movf	___lwdiv@quotient+1,w
  1461  0212  00F6               	movwf	?___lwdiv+1
  1462  0213  0821               	movf	___lwdiv@quotient,w
  1463  0214  00F5               	movwf	?___lwdiv
  1464  0215                     l468:
  1465  0215  0008               	return
  1466  0216                     __end_of___lwdiv:
  1467                           
  1468                           	psect	text5
  1469  0216                     __ptext5:	
  1470 ;; *************** function _USART_SEND_STRING *****************
  1471 ;; Defined at:
  1472 ;;		line 27 in file "USART.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  str             2    6[COMMON] PTR unsigned char 
  1475 ;;		 -> USART_SEND_INT@str(10), STR_1(2), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  i               2    3[BANK0 ] int 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1487 ;;      Params:         2       0       0       0       0
  1488 ;;      Locals:         0       2       0       0       0
  1489 ;;      Temps:          0       3       0       0       0
  1490 ;;      Totals:         2       5       0       0       0
  1491 ;;Total ram usage:        7 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    3
  1494 ;; This function calls:
  1495 ;;		_USART_SEND_CHAR
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;;		_USART_SEND_INT
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           
  1503                           ;psect for function _USART_SEND_STRING
  1504  0216                     _USART_SEND_STRING:
  1505  0216                     l958:	
  1506                           ;incstack = 0
  1507                           ; Regs used in _USART_SEND_STRING: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1508                           
  1509                           
  1510                           ;USART.c: 28:     int i;;USART.c: 29:     for(i=0;str[i]!='\0';i++)
  1511  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0218  01A3               	clrf	USART_SEND_STRING@i
  1514  0219  01A4               	clrf	USART_SEND_STRING@i+1
  1515  021A  2A3F               	goto	l964
  1516  021B                     l960:
  1517                           
  1518                           ;USART.c: 30:     USART_SEND_CHAR(str[i]);
  1519  021B  0823               	movf	USART_SEND_STRING@i,w
  1520  021C  0776               	addwf	USART_SEND_STRING@str,w
  1521  021D  00A1               	movwf	??_USART_SEND_STRING+1
  1522  021E  0877               	movf	USART_SEND_STRING@str+1,w
  1523  021F  00A0               	movwf	??_USART_SEND_STRING
  1524  0220  1803               	skipnc
  1525  0221  0AA0               	incf	??_USART_SEND_STRING,f
  1526  0222  1FA3               	btfss	USART_SEND_STRING@i,7
  1527  0223  2A25               	goto	u490
  1528  0224  03A0               	decf	??_USART_SEND_STRING,f
  1529  0225                     u490:
  1530  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0227  0820               	movf	??_USART_SEND_STRING,w
  1533  0228  00A2               	movwf	??_USART_SEND_STRING+2
  1534  0229  0822               	movf	??_USART_SEND_STRING+2,w
  1535  022A  00FF               	movwf	btemp+1
  1536  022B  0821               	movf	??_USART_SEND_STRING+1,w
  1537  022C  0084               	movwf	4
  1538  022D  120A  118A  2298  120A  118A  	fcall	stringtab
  1539  0232  120A  118A  22F6  120A  118A  	fcall	_USART_SEND_CHAR
  1540  0237                     l962:
  1541  0237  3001               	movlw	1
  1542  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1544  023A  07A3               	addwf	USART_SEND_STRING@i,f
  1545  023B  1803               	skipnc
  1546  023C  0AA4               	incf	USART_SEND_STRING@i+1,f
  1547  023D  3000               	movlw	0
  1548  023E  07A4               	addwf	USART_SEND_STRING@i+1,f
  1549  023F                     l964:
  1550  023F  0823               	movf	USART_SEND_STRING@i,w
  1551  0240  0776               	addwf	USART_SEND_STRING@str,w
  1552  0241  00A1               	movwf	??_USART_SEND_STRING+1
  1553  0242  0877               	movf	USART_SEND_STRING@str+1,w
  1554  0243  00A0               	movwf	??_USART_SEND_STRING
  1555  0244  1803               	skipnc
  1556  0245  0AA0               	incf	??_USART_SEND_STRING,f
  1557  0246  1FA3               	btfss	USART_SEND_STRING@i,7
  1558  0247  2A49               	goto	u500
  1559  0248  03A0               	decf	??_USART_SEND_STRING,f
  1560  0249                     u500:
  1561  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1562  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1563  024B  0820               	movf	??_USART_SEND_STRING,w
  1564  024C  00A2               	movwf	??_USART_SEND_STRING+2
  1565  024D  0822               	movf	??_USART_SEND_STRING+2,w
  1566  024E  00FF               	movwf	btemp+1
  1567  024F  0821               	movf	??_USART_SEND_STRING+1,w
  1568  0250  0084               	movwf	4
  1569  0251  120A  118A  2298  120A  118A  	fcall	stringtab
  1570  0256  3A00               	xorlw	0
  1571  0257  1D03               	skipz
  1572  0258  2A5A               	goto	u511
  1573  0259  2A5B               	goto	u510
  1574  025A                     u511:
  1575  025A  2A1B               	goto	l960
  1576  025B                     u510:
  1577  025B                     l74:
  1578  025B  0008               	return
  1579  025C                     __end_of_USART_SEND_STRING:
  1580                           
  1581                           	psect	text6
  1582  02F6                     __ptext6:	
  1583 ;; *************** function _USART_SEND_CHAR *****************
  1584 ;; Defined at:
  1585 ;;		line 22 in file "USART.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  ch              1    wreg     unsigned char 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  ch              1    5[COMMON] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1599 ;;      Params:         0       0       0       0       0
  1600 ;;      Locals:         1       0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0
  1602 ;;      Totals:         1       0       0       0       0
  1603 ;;Total ram usage:        1 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    2
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_USART_SEND_STRING
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _USART_SEND_CHAR
  1615  02F6                     _USART_SEND_CHAR:
  1616                           
  1617                           ;incstack = 0
  1618                           ; Regs used in _USART_SEND_CHAR: [wreg]
  1619                           ;USART_SEND_CHAR@ch stored from wreg
  1620  02F6  00F5               	movwf	USART_SEND_CHAR@ch
  1621  02F7                     l906:
  1622  02F7                     l65:	
  1623                           ;USART.c: 23:     while(!TRMT);
  1624                           
  1625  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  1626  02F8  1303               	bcf	3,6	;RP1=0, select bank1
  1627  02F9  1C98               	btfss	24,1	;volatile
  1628  02FA  2AFC               	goto	u351
  1629  02FB  2AFD               	goto	u350
  1630  02FC                     u351:
  1631  02FC  2AF7               	goto	l65
  1632  02FD                     u350:
  1633  02FD                     l908:
  1634                           
  1635                           ;USART.c: 24:     TXREG = ch;
  1636  02FD  0875               	movf	USART_SEND_CHAR@ch,w
  1637  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1638  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0300  0099               	movwf	25	;volatile
  1640  0301                     l68:
  1641  0301  0008               	return
  1642  0302                     __end_of_USART_SEND_CHAR:
  1643                           
  1644                           	psect	text7
  1645  02E4                     __ptext7:	
  1646 ;; *************** function _USART_INIT *****************
  1647 ;; Defined at:
  1648 ;;		line 11 in file "USART.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0
  1665 ;;      Totals:         0       0       0       0       0
  1666 ;;Total ram usage:        0 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    2
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _USART_INIT
  1678  02E4                     _USART_INIT:
  1679  02E4                     l1028:	
  1680                           ;incstack = 0
  1681                           ; Regs used in _USART_INIT: [wreg]
  1682                           
  1683                           
  1684                           ;USART.c: 13:     SPBRG = ((20000000/16)/19200) - 1;
  1685  02E4  3040               	movlw	64
  1686  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  1687  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  1688  02E7  0099               	movwf	25	;volatile
  1689                           
  1690                           ;USART.c: 14:     TXSTA = 0b00100100;
  1691  02E8  3024               	movlw	36
  1692  02E9  0098               	movwf	24	;volatile
  1693                           
  1694                           ;USART.c: 15:     RCSTA = 0b10010000;
  1695  02EA  3090               	movlw	144
  1696  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1697  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1698  02ED  0098               	movwf	24	;volatile
  1699                           
  1700                           ;USART.c: 16:     TRISC = 0b10000000;
  1701  02EE  3080               	movlw	128
  1702  02EF  1683               	bsf	3,5	;RP0=1, select bank1
  1703  02F0  1303               	bcf	3,6	;RP1=0, select bank1
  1704  02F1  0087               	movwf	7	;volatile
  1705  02F2                     l1030:
  1706                           
  1707                           ;USART.c: 18:     INTCON |= 1<<7;
  1708  02F2  178B               	bsf	11,7	;volatile
  1709  02F3                     l1032:
  1710                           
  1711                           ;USART.c: 19:     INTCON |= 1<<6;
  1712  02F3  170B               	bsf	11,6	;volatile
  1713  02F4                     l1034:
  1714                           
  1715                           ;USART.c: 20:     PIE1 |= 1<<5;
  1716  02F4  168C               	bsf	12,5	;volatile
  1717  02F5                     l62:
  1718  02F5  0008               	return
  1719  02F6                     __end_of_USART_INIT:
  1720                           
  1721                           	psect	text8
  1722  02D1                     __ptext8:	
  1723 ;; *************** function _isr *****************
  1724 ;; Defined at:
  1725 ;;		line 41 in file "USART.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  received        1    4[COMMON] unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, status,2, status,0, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       0       0       0       0
  1740 ;;      Locals:         1       0       0       0       0
  1741 ;;      Temps:          3       0       0       0       0
  1742 ;;      Totals:         4       0       0       0       0
  1743 ;;Total ram usage:        4 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    1
  1746 ;; This function calls:
  1747 ;;		i1_USART_SEND_CHAR
  1748 ;; This function is called by:
  1749 ;;		Interrupt level 1
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _isr
  1755  02D1                     _isr:
  1756  02D1                     i1l1086:
  1757                           
  1758                           ;USART.c: 42:     char received = RCREG;
  1759  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1760  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1761  02D3  081A               	movf	26,w	;volatile
  1762  02D4  00F1               	movwf	??_isr
  1763  02D5  0871               	movf	??_isr,w
  1764  02D6  00F4               	movwf	isr@received
  1765  02D7                     i1l1088:
  1766                           
  1767                           ;USART.c: 43:     USART_SEND_CHAR(received);
  1768  02D7  0874               	movf	isr@received,w
  1769  02D8  120A  118A  2302  120A  118A  	fcall	i1_USART_SEND_CHAR
  1770  02DD                     i1l82:
  1771  02DD  0873               	movf	??_isr+2,w
  1772  02DE  008A               	movwf	10
  1773  02DF  0E72               	swapf	??_isr+1,w
  1774  02E0  0083               	movwf	3
  1775  02E1  0EFE               	swapf	btemp,f
  1776  02E2  0E7E               	swapf	btemp,w
  1777  02E3  0009               	retfie
  1778  02E4                     __end_of_isr:
  1779                           
  1780                           	psect	intentry
  1781  0004                     __pintentry:	
  1782                           ;incstack = 0
  1783                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1784                           
  1785  0004                     interrupt_function:
  1786  007E                     saved_w	set	btemp
  1787  0004  00FE               	movwf	btemp
  1788  0005  0E03               	swapf	3,w
  1789  0006  00F2               	movwf	??_isr+1
  1790  0007  080A               	movf	10,w
  1791  0008  00F3               	movwf	??_isr+2
  1792  0009  120A  118A  2AD1   	ljmp	_isr
  1793                           
  1794                           	psect	text9
  1795  0302                     __ptext9:	
  1796 ;; *************** function i1_USART_SEND_CHAR *****************
  1797 ;; Defined at:
  1798 ;;		line 22 in file "USART.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  ch              1    wreg     unsigned char 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  ch              1    0[COMMON] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1812 ;;      Params:         0       0       0       0       0
  1813 ;;      Locals:         1       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0
  1815 ;;      Totals:         1       0       0       0       0
  1816 ;;Total ram usage:        1 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_isr
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function i1_USART_SEND_CHAR
  1827  0302                     i1_USART_SEND_CHAR:
  1828                           
  1829                           ;incstack = 0
  1830                           ; Regs used in i1_USART_SEND_CHAR: [wreg]
  1831                           ;i1USART_SEND_CHAR@ch stored from wreg
  1832  0302  00F0               	movwf	i1USART_SEND_CHAR@ch
  1833  0303                     i1l1038:
  1834  0303                     i1l65:	
  1835                           ;USART.c: 23:     while(!TRMT);
  1836                           
  1837  0303  1683               	bsf	3,5	;RP0=1, select bank1
  1838  0304  1303               	bcf	3,6	;RP1=0, select bank1
  1839  0305  1C98               	btfss	24,1	;volatile
  1840  0306  2B08               	goto	u59_21
  1841  0307  2B09               	goto	u59_20
  1842  0308                     u59_21:
  1843  0308  2B03               	goto	i1l65
  1844  0309                     u59_20:
  1845  0309                     i1l1040:
  1846                           
  1847                           ;USART.c: 24:     TXREG = ch;
  1848  0309  0870               	movf	i1USART_SEND_CHAR@ch,w
  1849  030A  1283               	bcf	3,5	;RP0=0, select bank0
  1850  030B  1303               	bcf	3,6	;RP1=0, select bank0
  1851  030C  0099               	movwf	25	;volatile
  1852  030D                     i1l68:
  1853  030D  0008               	return
  1854  030E                     __end_ofi1_USART_SEND_CHAR:
  1855  007E                     btemp	set	126	;btemp
  1856  007E                     wtemp0	set	126
  1857                           
  1858                           	psect	config
  1859                           
  1860                           ;Config register CONFIG @ 0x2007
  1861                           ;	Oscillator Selection bits
  1862                           ;	FOSC = HS, HS oscillator
  1863                           ;	Watchdog Timer Enable bit
  1864                           ;	WDTE = OFF, WDT disabled
  1865                           ;	Power-up Timer Enable bit
  1866                           ;	PWRTE = OFF, PWRT disabled
  1867                           ;	Brown-out Reset Enable bit
  1868                           ;	BOREN = OFF, BOR disabled
  1869                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1870                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1871                           ;	Data EEPROM Memory Code Protection bit
  1872                           ;	CPD = OFF, Data EEPROM code protection off
  1873                           ;	Flash Program Memory Write Enable bits
  1874                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1875                           ;	In-Circuit Debugger Mode bit
  1876                           ;	DEBUG = 0x1, unprogrammed default
  1877                           ;	Flash Program Memory Code Protection bit
  1878                           ;	CP = OFF, Code protection off
  1879  2007                     	org	8199
  1880  2007  3F3A               	dw	16186

Data Sizes:
    Strings     5
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80     41      41
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> USART_SEND_INT@str(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_SEND_STRING@str	PTR unsigned char  size(2) Largest target is 10
		 -> USART_SEND_INT@str(BANK0[10]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _USART_SEND_STRING->_USART_SEND_CHAR

Critical Paths under _isr in COMMON

    _isr->i1_USART_SEND_CHAR

Critical Paths under _main in BANK0

    _main->_USART_SEND_INT
    _USART_SEND_INT->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2090
                                             36 BANK0      5     5      0
                         _USART_INIT
                     _USART_SEND_INT
                  _USART_SEND_STRING
 ---------------------------------------------------------------------------------
 (1) _USART_SEND_INT                                      13    11      2    1627
                                             23 BANK0     13    11      2
                  _USART_SEND_STRING
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1211
                                             10 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              4 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              5 COMMON     4     0      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _USART_SEND_STRING                                    7     5      2     264
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                    _USART_SEND_CHAR
 ---------------------------------------------------------------------------------
 (2) _USART_SEND_CHAR                                      1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_INIT                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      45
                                              1 COMMON     4     4      0
                  i1_USART_SEND_CHAR
 ---------------------------------------------------------------------------------
 (5) i1_USART_SEND_CHAR                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_INIT
   _USART_SEND_INT
     _USART_SEND_STRING
       _USART_SEND_CHAR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _USART_SEND_STRING
     _USART_SEND_CHAR

 _isr (ROOT)
   i1_USART_SEND_CHAR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      29       5       51.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Sep 22 19:32:10 2020

                         pc 0002                          l26 0113                          l62 02F5  
                        l65 02F7                          l74 025B                          l68 0301  
                        l77 02D0                          fsr 0004             ?_USART_SEND_INT 0037  
                       l192 00FC                         l468 0215                         l910 01D0  
                       l478 0297                         l920 01E8                         l912 01D4  
                       l906 02F7                         l930 020B                         l922 01EC  
                       l914 01DA                         l908 02FD                         l924 01FD  
                       l916 01DD                         l932 0211                         l940 0267  
                       l926 0203                         l918 01E4                         l950 0286  
                       l942 026E                         l960 021B                         l928 0204  
                       l952 028D                         l944 0272                         l936 025C  
                       l962 0237                         l946 0276                         l938 0264  
                       l954 0293                         l970 0021                         l964 023F  
                       l948 0280                         l980 004B                         l972 0028  
                       l958 0216                         l990 0064                         l982 0053  
                       l974 002D                         l966 0016                         l984 0057  
                       l968 001B                         l986 005B                         l978 002E  
                       l996 0066                         l988 005F                         u400 01FD  
                       u401 01FC                         u500 0249                         u420 0211  
                       u421 0210                         u405 01F9                         u350 02FD  
                       u510 025B                         u430 0264                         u351 02FC  
                       u511 025A                         u415 0205                         u431 0263  
                       u360 01DA                         u520 0021                         u600 0117  
                       u361 01D9                         u521 0020                         u601 0116  
                       u450 0276                         u530 005B                         u610 012C  
                       u451 0275                         u531 005A                         u611 012B  
                       u380 01EC                         u460 0280                         u540 0081  
                       u620 013B                         u381 01EB                         u461 027F  
                       u445 0268                         u541 0080                         u621 013A  
                       u550 008C                         u630 014F                         u375 01DE  
                       u551 008B                         u631 014E                         u615 0128  
                       u480 0293                         u560 0092                         u640 015E  
                       u481 0292                         u465 027C                         u561 0091  
                       u545 007D                         u641 015D                         u625 0137  
                       u490 0225                         u570 00E6                         u650 0172  
                       u395 01ED                         u475 0287                         u571 00E5  
                       u651 0171                         u635 014B                         u580 00F8  
                       u660 0181                         u581 00F7                         u661 0180  
                       u645 015A                         u670 0195                         u671 0194  
                       u655 016E                         u680 01A4                         u681 01A3  
                       u665 017D                         u675 0191                         u685 01A0  
                       u697 01C6                         _isr 02D1                         fsr0 0004  
                       indf 0000            ?_USART_SEND_CHAR 0070                        l1000 0082  
                      l1010 00A2                        l1002 008C                        l1012 00D2  
                      l1004 0092                        l1020 00F8                        l1030 02F2  
                      l1014 00D9                        l1006 0099                        l1110 0040  
                      l1032 02F3                        l1016 00DD                        l1008 009D  
                      l1034 02F4                        l1018 00E6                        l1050 0110  
                      l1042 00FD                        l1028 02E4                        l1036 02B7  
                      l1060 0140                        l1052 0117                        l1044 0105  
                      l1070 0181                        l1062 014F                        l1054 011F  
                      l1046 0108                        l1072 0186                        l1064 015E  
                      l1080 01AC                        l1056 012C                        l1048 010B  
                      l1082 01B5                        l1074 0195                        l1066 0163  
                      l1058 013B                        l1084 01BE                        l1076 01A4  
                      l1068 0172                        l1078 01A9                        ?_isr 0070  
                      STR_1 02B5                        STR_2 02B2                        _PIE1 008C  
                      i1l65 0303                        i1l82 02DD                        i1l68 030D  
                      _TRMT 04C1                        _main 00FD                        btemp 007E  
                      start 000C                       ??_isr 0071                       ?_main 0070  
           __end_of___lwdiv 0216             __end_of___lwmod 0298                       _RCREG 001A  
                     _RCSTA 0018                       _SPBRG 0099                       _PORTB 0006  
                     _TRISB 0086                       _TRISC 0087                       u59_20 0309  
                     u59_21 0308                       _TXREG 0019                       _TXSTA 0098  
           __end_of_dpowers 02B2                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 00FD                 ?_USART_INIT 0070  
           __initialization 000F                __end_of_main 01D0           _USART_SEND_STRING 0216  
                    ??_main 0044          ?_USART_SEND_STRING 0076                      _ADCON0 001F  
                    _ADCON1 009F         ??_USART_SEND_STRING 0020                      _ADRESH 001E  
                    _ADRESL 009E                      i1l1040 0309                      i1l1038 0303  
                    i1l1086 02D1                      i1l1088 02D7                      _INTCON 000B  
               isr@received 0074   __end_of_USART_SEND_STRING 025C                   ??___lwdiv 0020  
                 ??___lwmod 0028         __size_of_USART_INIT 0012                      saved_w 007E  
        USART_SEND_STRING@i 0023                   ??_sprintf 002D     __end_of__initialization 000F  
            __pcstackCOMMON 0070            ??_USART_SEND_INT 0039                  __pmaintext 00FD  
__size_of_USART_SEND_STRING 0046                  __pintentry 0004           i1_USART_SEND_CHAR 0302  
                __stringtab 0298          ?i1_USART_SEND_CHAR 0070    __size_of_USART_SEND_CHAR 000C  
              ??_USART_INIT 0075         ??i1_USART_SEND_CHAR 0070                     ___lwdiv 01D0  
                   ___lwmod 025C                     __ptext1 02B7                     __ptext2 0013  
                   __ptext3 025C                     __ptext4 01D0                     __ptext5 0216  
                   __ptext6 02F6                     __ptext7 02E4                     __ptext8 02D1  
                   __ptext9 0302                     _dpowers 02A8                __size_of_isr 0013  
        __end_of_USART_INIT 02F6   __end_ofi1_USART_SEND_CHAR 030E                     _sprintf 0013  
                   main@val 0047        end_of_initialization 000F           ??_USART_SEND_CHAR 0075  
       start_initialization 000F  __size_ofi1_USART_SEND_CHAR 000C                 __end_of_isr 02E4  
         USART_SEND_CHAR@ch 0075           USART_SEND_INT@val 0037           USART_SEND_INT@str 003A  
                 ___latbits 0002               __pcstackBANK0 0020                 sprintf@flag 0031  
               sprintf@prec 0032            ___lwdiv@dividend 0077                    ?___lwdiv 0075  
                  ?___lwmod 0024                   __pstrings 0298     __size_of_USART_SEND_INT 001A  
          ___lwdiv@quotient 0021                    ?_sprintf 002A           interrupt_function 0004  
               __stringbase 02A7             _USART_SEND_CHAR 02F6            __size_of___lwdiv 0046  
          __size_of___lwmod 003C          __end_of__stringtab 02A8                  sprintf@val 0033  
           ___lwdiv@divisor 0075             ___lwdiv@counter 0023            __size_of_sprintf 00EA  
             __size_of_main 00D3              _USART_SEND_INT 02B7     __end_of_USART_SEND_CHAR 0302  
                  intlevel1 0000                   sprintf@ap 0030                   sprintf@sp 0035  
          ___lwmod@dividend 0026                   stringcode 02A2        USART_SEND_STRING@str 0076  
    __end_of_USART_SEND_INT 02D1                    sprintf@c 0036                    sprintf@f 002A  
       i1USART_SEND_CHAR@ch 0070             ___lwmod@divisor 0024             ___lwmod@counter 0029  
                  stringdir 02A2                    stringtab 0298                  _USART_INIT 02E4  
