

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Sep 22 21:35:38 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0094                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0008                     	;# 
   118  0009                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001B                     	;# 
   139  001B                     	;# 
   140  001C                     	;# 
   141  001D                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  0081                     	;# 
   145  0085                     	;# 
   146  0086                     	;# 
   147  0087                     	;# 
   148  0088                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0094                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  010C                     	;# 
   164  010D                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  000E                     	;# 
   185  000F                     	;# 
   186  0010                     	;# 
   187  0011                     	;# 
   188  0012                     	;# 
   189  0013                     	;# 
   190  0014                     	;# 
   191  0015                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  001D                     	;# 
   202  001E                     	;# 
   203  001F                     	;# 
   204  0081                     	;# 
   205  0085                     	;# 
   206  0086                     	;# 
   207  0087                     	;# 
   208  0088                     	;# 
   209  0089                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0091                     	;# 
   214  0092                     	;# 
   215  0093                     	;# 
   216  0094                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  001A                     _RCREG	set	26
   230  0019                     _TXREG	set	25
   231  000B                     _INTCON	set	11
   232  0018                     _RCSTA	set	24
   233  008C                     _PIE1	set	140
   234  0087                     _TRISC	set	135
   235  0098                     _TXSTA	set	152
   236  0099                     _SPBRG	set	153
   237  04C1                     _TRMT	set	1217
   238                           
   239                           	psect	strings
   240  0044                     __pstrings:
   241  0044                     stringtab:
   242  0044                     __stringtab:
   243  0044                     stringcode:	
   244                           ;	String table - string pointers are 1 byte each
   245                           
   246  0044                     stringdir:
   247  0044  3000               	movlw	high stringdir
   248  0045  008A               	movwf	10
   249  0046  0804               	movf	4,w
   250  0047  0A84               	incf	4,f
   251  0048  0782               	addwf	2,f
   252  0049                     __stringbase:
   253  0049  3400               	retlw	0
   254  004A                     __end_of__stringtab:
   255  004A                     STR_1:
   256  004A  3425               	retlw	37	;'%'
   257  004B  3464               	retlw	100	;'d'
   258  004C  3400               	retlw	0
   259                           
   260                           	psect	cinit
   261  000F                     start_initialization:	
   262                           ; #config settings
   263                           
   264  000F                     __initialization:
   265  000F                     end_of_initialization:	
   266                           ;End of C runtime variable initialization code
   267                           
   268  000F                     __end_of__initialization:
   269  000F  0183               	clrf	3
   270  0010  120A  118A  284D   	ljmp	_main	;jump to C main() function
   271                           
   272                           	psect	cstackCOMMON
   273  0070                     __pcstackCOMMON:
   274  0070                     ?_USART_INIT:
   275  0070                     ?_main:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_USART_SEND_CHAR:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ??_USART_SEND_CHAR:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_isr:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     USART_SEND_CHAR@ch:	
   288                           ; 1 bytes @ 0x0
   289                           
   290                           
   291                           ; 1 bytes @ 0x0
   292  0070                     	ds	1
   293  0071                     ??_isr:
   294                           
   295                           ; 1 bytes @ 0x1
   296  0071                     	ds	3
   297  0074                     isr@received:
   298                           
   299                           ; 1 bytes @ 0x4
   300  0074                     	ds	1
   301  0075                     ??_USART_INIT:
   302  0075                     ??_main:	
   303                           ; 1 bytes @ 0x5
   304                           
   305                           
   306                           	psect	maintext
   307  004D                     __pmaintext:	
   308                           ; 1 bytes @ 0x5
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 32 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, status,0, pclath, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : B00/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   328 ;;      Params:         0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0
   330 ;;      Temps:          0       0       0       0       0
   331 ;;      Totals:         0       0       0       0       0
   332 ;;Total ram usage:        0 bytes
   333 ;; Hardware stack levels required when called:    3
   334 ;; This function calls:
   335 ;;		_USART_INIT
   336 ;; This function is called by:
   337 ;;		Startup code after reset
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341                           
   342                           ;psect for function _main
   343  004D                     _main:
   344  004D                     l672:	
   345                           ;incstack = 0
   346                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   347                           
   348                           
   349                           ;main.c: 34:     USART_INIT();
   350  004D  120A  118A  2026  120A  118A  	fcall	_USART_INIT
   351  0052                     l7:	
   352                           ;main.c: 36:     while(1){
   353                           
   354  0052                     l8:	
   355                           ;main.c: 46:     }
   356                           
   357  0052  2852               	goto	l7
   358  0053  120A  118A  280C   	ljmp	start
   359  0056                     __end_of_main:
   360                           
   361                           	psect	text1
   362  0026                     __ptext1:	
   363 ;; *************** function _USART_INIT *****************
   364 ;; Defined at:
   365 ;;		line 11 in file "USART.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;		None
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg
   374 ;; Tracked objects:
   375 ;;		On entry : 0/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   379 ;;      Params:         0       0       0       0       0
   380 ;;      Locals:         0       0       0       0       0
   381 ;;      Temps:          0       0       0       0       0
   382 ;;      Totals:         0       0       0       0       0
   383 ;;Total ram usage:        0 bytes
   384 ;; Hardware stack levels used:    1
   385 ;; Hardware stack levels required when called:    2
   386 ;; This function calls:
   387 ;;		Nothing
   388 ;; This function is called by:
   389 ;;		_main
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           
   394                           ;psect for function _USART_INIT
   395  0026                     _USART_INIT:
   396  0026                     l652:	
   397                           ;incstack = 0
   398                           ; Regs used in _USART_INIT: [wreg]
   399                           
   400                           
   401                           ;USART.c: 13:     SPBRG = ((20000000/16)/19200) - 1;
   402  0026  3040               	movlw	64
   403  0027  1683               	bsf	3,5	;RP0=1, select bank1
   404  0028  1303               	bcf	3,6	;RP1=0, select bank1
   405  0029  0099               	movwf	25	;volatile
   406                           
   407                           ;USART.c: 14:     TXSTA = 0b00100100;
   408  002A  3024               	movlw	36
   409  002B  0098               	movwf	24	;volatile
   410                           
   411                           ;USART.c: 15:     RCSTA = 0b10010000;
   412  002C  3090               	movlw	144
   413  002D  1283               	bcf	3,5	;RP0=0, select bank0
   414  002E  1303               	bcf	3,6	;RP1=0, select bank0
   415  002F  0098               	movwf	24	;volatile
   416                           
   417                           ;USART.c: 16:     TRISC = 0b10000000;
   418  0030  3080               	movlw	128
   419  0031  1683               	bsf	3,5	;RP0=1, select bank1
   420  0032  1303               	bcf	3,6	;RP1=0, select bank1
   421  0033  0087               	movwf	7	;volatile
   422  0034                     l654:
   423                           
   424                           ;USART.c: 18:     INTCON |= 1<<7;
   425  0034  178B               	bsf	11,7	;volatile
   426  0035                     l656:
   427                           
   428                           ;USART.c: 19:     INTCON |= 1<<6;
   429  0035  170B               	bsf	11,6	;volatile
   430  0036                     l658:
   431                           
   432                           ;USART.c: 20:     PIE1 |= 1<<5;
   433  0036  168C               	bsf	12,5	;volatile
   434  0037                     l33:
   435  0037  0008               	return
   436  0038                     __end_of_USART_INIT:
   437                           
   438                           	psect	text2
   439  0013                     __ptext2:	
   440 ;; *************** function _isr *****************
   441 ;; Defined at:
   442 ;;		line 41 in file "USART.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  received        1    4[COMMON] unsigned char 
   447 ;; Return value:  Size  Location     Type
   448 ;;                  1    wreg      void 
   449 ;; Registers used:
   450 ;;		wreg, status,2, status,0, pclath, cstack
   451 ;; Tracked objects:
   452 ;;		On entry : 0/0
   453 ;;		On exit  : 0/0
   454 ;;		Unchanged: 0/0
   455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   456 ;;      Params:         0       0       0       0       0
   457 ;;      Locals:         1       0       0       0       0
   458 ;;      Temps:          3       0       0       0       0
   459 ;;      Totals:         4       0       0       0       0
   460 ;;Total ram usage:        4 bytes
   461 ;; Hardware stack levels used:    1
   462 ;; Hardware stack levels required when called:    1
   463 ;; This function calls:
   464 ;;		_USART_SEND_CHAR
   465 ;; This function is called by:
   466 ;;		Interrupt level 1
   467 ;; This function uses a non-reentrant model
   468 ;;
   469                           
   470                           
   471                           ;psect for function _isr
   472  0013                     _isr:
   473  0013                     i1l678:
   474                           
   475                           ;USART.c: 42:     char received = RCREG;
   476  0013  1283               	bcf	3,5	;RP0=0, select bank0
   477  0014  1303               	bcf	3,6	;RP1=0, select bank0
   478  0015  081A               	movf	26,w	;volatile
   479  0016  00F1               	movwf	??_isr
   480  0017  0871               	movf	??_isr,w
   481  0018  00F4               	movwf	isr@received
   482  0019                     i1l680:
   483                           
   484                           ;USART.c: 43:     USART_SEND_CHAR(received);
   485  0019  0874               	movf	isr@received,w
   486  001A  120A  118A  2038  120A  118A  	fcall	_USART_SEND_CHAR
   487  001F                     i1l53:
   488  001F  0873               	movf	??_isr+2,w
   489  0020  008A               	movwf	10
   490  0021  0E72               	swapf	??_isr+1,w
   491  0022  0083               	movwf	3
   492  0023  0EFE               	swapf	btemp,f
   493  0024  0E7E               	swapf	btemp,w
   494  0025  0009               	retfie
   495  0026                     __end_of_isr:
   496                           
   497                           	psect	intentry
   498  0004                     __pintentry:	
   499                           ;incstack = 0
   500                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
   501                           
   502  0004                     interrupt_function:
   503  007E                     saved_w	set	btemp
   504  0004  00FE               	movwf	btemp
   505  0005  0E03               	swapf	3,w
   506  0006  00F2               	movwf	??_isr+1
   507  0007  080A               	movf	10,w
   508  0008  00F3               	movwf	??_isr+2
   509  0009  120A  118A  2813   	ljmp	_isr
   510                           
   511                           	psect	text3
   512  0038                     __ptext3:	
   513 ;; *************** function _USART_SEND_CHAR *****************
   514 ;; Defined at:
   515 ;;		line 22 in file "USART.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  ch              1    wreg     unsigned char 
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  ch              1    0[COMMON] unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   529 ;;      Params:         0       0       0       0       0
   530 ;;      Locals:         1       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0
   532 ;;      Totals:         1       0       0       0       0
   533 ;;Total ram usage:        1 bytes
   534 ;; Hardware stack levels used:    1
   535 ;; This function calls:
   536 ;;		Nothing
   537 ;; This function is called by:
   538 ;;		_isr
   539 ;;		_USART_SEND_STRING
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           
   544                           ;psect for function _USART_SEND_CHAR
   545  0038                     _USART_SEND_CHAR:
   546                           
   547                           ;incstack = 0
   548                           ; Regs used in _USART_SEND_CHAR: [wreg]
   549                           ;USART_SEND_CHAR@ch stored from wreg
   550  0038  00F0               	movwf	USART_SEND_CHAR@ch
   551  0039                     i1l660:
   552  0039                     i1l36:	
   553                           ;USART.c: 23:     while(!TRMT);
   554                           
   555  0039  1683               	bsf	3,5	;RP0=1, select bank1
   556  003A  1303               	bcf	3,6	;RP1=0, select bank1
   557  003B  1C98               	btfss	24,1	;volatile
   558  003C  283E               	goto	u1_21
   559  003D  283F               	goto	u1_20
   560  003E                     u1_21:
   561  003E  2839               	goto	i1l36
   562  003F                     u1_20:
   563  003F                     i1l662:
   564                           
   565                           ;USART.c: 24:     TXREG = ch;
   566  003F  0870               	movf	USART_SEND_CHAR@ch,w
   567  0040  1283               	bcf	3,5	;RP0=0, select bank0
   568  0041  1303               	bcf	3,6	;RP1=0, select bank0
   569  0042  0099               	movwf	25	;volatile
   570  0043                     i1l39:
   571  0043  0008               	return
   572  0044                     __end_of_USART_SEND_CHAR:
   573  007E                     btemp	set	126	;btemp
   574  007E                     wtemp0	set	126
   575                           
   576                           	psect	config
   577                           
   578                           ;Config register CONFIG @ 0x2007
   579                           ;	Oscillator Selection bits
   580                           ;	FOSC = HS, HS oscillator
   581                           ;	Watchdog Timer Enable bit
   582                           ;	WDTE = OFF, WDT disabled
   583                           ;	Power-up Timer Enable bit
   584                           ;	PWRTE = OFF, PWRT disabled
   585                           ;	Brown-out Reset Enable bit
   586                           ;	BOREN = OFF, BOR disabled
   587                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   588                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   589                           ;	Data EEPROM Memory Code Protection bit
   590                           ;	CPD = OFF, Data EEPROM code protection off
   591                           ;	Flash Program Memory Write Enable bits
   592                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   593                           ;	In-Circuit Debugger Mode bit
   594                           ;	DEBUG = 0x1, unprogrammed default
   595                           ;	Flash Program Memory Code Protection bit
   596                           ;	CP = OFF, Code protection off
   597  2007                     	org	8199
   598  2007  3F3A               	dw	16186

Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S506__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    S506__prbuf$ptr	PTR unsigned char  size(1) Largest target is 10
		 -> USART_SEND_INT@str(COMMON[10]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 10
		 -> USART_SEND_INT@str(COMMON[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_USART_SEND_CHAR

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                         _USART_INIT
 ---------------------------------------------------------------------------------
 (1) _USART_INIT                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0      30
                                              1 COMMON     4     4      0
                    _USART_SEND_CHAR
 ---------------------------------------------------------------------------------
 (3) _USART_SEND_CHAR                                      1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_INIT

 _isr (ROOT)
   _USART_SEND_CHAR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       5       1       35.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Sep 22 21:35:38 2020

                       l7 0052                         l8 0052                         pc 0002  
                      l33 0037                        fsr 0004                       l652 0026  
                     l654 0034                       l656 0035                       l672 004D  
                     l658 0036                       _isr 0013          ?_USART_SEND_CHAR 0070  
                    ?_isr 0070                      STR_1 004A                      _PIE1 008C  
                    i1l36 0039                      i1l53 001F                      i1l39 0043  
                    _TRMT 04C1                      u1_20 003F                      u1_21 003E  
                    _main 004D                      btemp 007E                      start 000C  
                   ??_isr 0071                     ?_main 0070                     i1l660 0039  
                   i1l662 003F                     i1l680 0019                     i1l678 0013  
                   _RCREG 001A                     _RCSTA 0018                     _SPBRG 0099  
                   _TRISC 0087                     _TXREG 0019                     _TXSTA 0098  
                   pclath 000A                     status 0003                     wtemp0 007E  
             ?_USART_INIT 0070           __initialization 000F              __end_of_main 0056  
                  ??_main 0075                    _INTCON 000B               isr@received 0074  
     __size_of_USART_INIT 0012                    saved_w 007E   __end_of__initialization 000F  
          __pcstackCOMMON 0070                __pmaintext 004D                __pintentry 0004  
              __stringtab 0044  __size_of_USART_SEND_CHAR 000C              ??_USART_INIT 0075  
                 __ptext1 0026                   __ptext2 0013                   __ptext3 0038  
            __size_of_isr 0013        __end_of_USART_INIT 0038      end_of_initialization 000F  
       ??_USART_SEND_CHAR 0070       start_initialization 000F               __end_of_isr 0026  
       USART_SEND_CHAR@ch 0070                 ___latbits 0002                 __pstrings 0044  
       interrupt_function 0004               __stringbase 0049           _USART_SEND_CHAR 0038  
      __end_of__stringtab 004A             __size_of_main 0009   __end_of_USART_SEND_CHAR 0044  
                intlevel1 0000                 stringcode 0044                  stringdir 0044  
                stringtab 0044                _USART_INIT 0026  
